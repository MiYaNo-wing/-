#include<iostream>
#include<algorithm>
const int VMAX = 1000;//最大顶点数
const int INF = 10000000;//设 INF 为一个很大的数(代表无穷大)
int Vnum, Anum, G[VMAX][VMAX], d[VMAX];//G 是代表邻接矩阵的数组， d 存的是顶点与集合 S 的最短距离 （集合 S 存的是已被访问的顶点）                                  
bool visited[VMAX] = { false };//判断顶点是否被访问

using namespace std;

int prim()
{
	int ans = 0;
	fill(d, d + VMAX, INF);
	d[0] = 0;
	for (int i = 0; i < Vnum; i++){
		int u = -1, MIN = INF;
		for (int j = 0; j < Vnum; j++) {
			if (visited[j] == false && d[j] < MIN) {
				u = j;
				MIN = d[j];
			}
		}
		if (u == -1)
			return -1;
		visited[u] = true;
		ans += d[u];
		for (int v = 0; v < Vnum; v++) {
			if (visited[v] == false && G[u][v] != INF && G[u][v] < d[v]) {
				d[v] = G[u][v];//优化 d[v]
			}
		}
	}

	return ans;
}

int main()
{
	cout << "请输入顶点数和边数：";
	cin >> Vnum >> Anum;
	fill(G[0], G[0] + VMAX * VMAX, INF);
	cout << "请输入边的数据（起点 终点 权值）：\n";
	int u, v, w;
	for (int i = 0; i < Anum; i++) {
		cin >> u >> v >> w;//输入 u， v 以及 u->v 的权值
		G[u][v] = G[v][u] = w;//无向图
	}
	int ans = prim();// prim 算法入口
	cout << ans;

	return 0;
}
